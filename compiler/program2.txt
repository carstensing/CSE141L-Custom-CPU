instructions:

set x y
# reg[x] = reg[y]

lsw
    sw 0 y
    # DM[reg[y]] = reg[6]

    lw x 0
    # reg[7] = DM[reg[x]]

bne x y
# if Acc != reg[x] then PC-=reg[y]

xor x y
# Acc = reg[x] ^ reg[y]

add x
# Acc = Acc + x

par x y
# Acc = parity(reg[x] & reg[y])

errflg x
# Acc = {^reg[x], reg[x][6:0]} 

lsor x y
# Acc = (reg[x]<<1) | reg[y]

DM init:
0:48  original_message
61    num_spaces
62    tap_pattern_index
63    lfsr_start_state
130   tap_pattern_list
140   space_char
141   delimiter_char


reg init:
0 0    # Acc
1 61   # counter
2 0    # i
3 0    # tap_pattern
4 255  # curr_lfsr
5 140  # index
6 0    # store
7 0    # load

START

set 2 4
# reg[2] = reg[4]
# i = curr_lfsr

lsw 5 0
# reg[7] = DM[reg[5]]
# load = space_char

set 6 7
# reg[6] = reg[7]
# store = load

set 0 1
# reg[0] = reg[1]
# Acc = counter

add 3
# Acc = Acc + 1
# Acc = curr_lfsr += 3

set 1 0
# reg[1] = reg[0]
# counter = Acc

# counter += 3
# counter = 64

lsw 1 0
# reg[7] = DM[reg[1]]
# load = DM[64]

xor 3 3
# Acc = reg[3] ^ reg[3]
# Acc = 0

<-- add LOOP1
# Acc = Acc + LOOP1
# Acc = LOOP1

set 5 0
# reg[5] = reg[0]
# num_instructions = Acc

reg:
0 0           # Acc
1 64          # counter
2 0           # i
3 0           # tap_pattern
4 255         # curr_lfsr
5 140         # index --> num_instructions
6 space_char  # store
7 DM[64]      # load

#!# LOOP1

set 0 4
# reg[0] = reg[4]
# Acc = curr_lfsr

add 1
# Acc = Acc + 1
# Acc = curr_lfsr++

set 4 0
# reg[4] = reg[0]
# curr_lfsr = Acc

// curr_lfsr++

xor 6 4
# Acc = reg[6] ^ reg[4]
# Acc = space_char ^ curr_lfsr

errflg 0
# Acc = {^Acc, Acc[6:0]} 

reg:
0 X            # Acc
1 64           # counter
2 0            # i
3 0            # tap_pattern
4 curr_lfsr++  # curr_lfsr
5 140          # index
6 space_char   # store
7 DM[64]       # load

bne 7 5
# if Acc != reg[7] then PC-=reg[5]
# if data_mem[64] != X then PC-=num_instructions

#!# LOOP1 END

reg:
0 DM[64]            # Acc
1 64                # counter
2 0                 # i
3 0                 # tap_pattern
4 lfsr_start_state  # curr_lfsr
5 140               # index
6 space_char        # store
7 DM[64]            # load

set 0 1

add 63

add 2

set 2 0

// i = 129

add 10

set 5 0

// index = 139

set 6 4
# store = lfsr_start_state

lsw 0 5
# DM[reg[5]] = reg[6]
# DM[139] = lfsr_start_state

reg:
0 DM[64]            # Acc
1 64                # counter
2 129               # i
3 0                 # tap_pattern
4 lfsr_start_state  # curr_lfsr
5 139               # index
6 lfsr_start_state  # store
7 DM[64]            # load

#!# LOOP2

xor 3 3
add 63
add 63
add 13
set 6 0
# store = 139
lsw 6 0
# load = lfsr_start_state
set 4 7

// curr_lfsr = lfsr_start_state

set 0 2
# reg[0] = reg[2]
# Acc = i

add 1
# Acc = Acc + 1
# Acc = i++

set 2 0
# reg[2] = reg[0]
# i = Acc

// i++

xor 3 3
# Acc = reg[3] ^ reg[3]
# Acc = 0

add 63
# Acc = Acc + 63
# Acc = 63

add 1
# Acc = Acc + 1
# Acc = 64

set 5 0

// index = 64

xor 3 3
# Acc = reg[3] ^ reg[3]
# Acc = 0

set 1 0

// count = 0

reg:
0 0                 # Acc
1 0                 # counter
2 130               # i
3 0                 # num_instructions
4 lfsr_start_state  # curr_lfsr
5 64                # index
6 139               # store
7 lfsr_start_state  # load

#!# LOOP3

xor 3 3
<-- add LOOP2
set 3 0
// num_instructions = LOOP2

xor 3 3
add 63
add 63
add 14
set 6 0
// store = 140

lsw 6 0
# load = space_char

set 6 7
# store = space_char

lsw 5 0
# load = DM[index]

xor 7 4
# Acc = DM[index] ^ curr_lfsr

bne 6 3
# if Acc != reg[6] then PC-=reg[3]
# if Acc != space_char then PC-=num_instructions

#!# LOOP2 END

lsw 2 0
# load = tap_pattern

par 4 7
# Acc = parity(curr_lfsr & tap_pattern)

lsor 4 0
# Acc = (reg[4]<<1) | reg[0]

set 4 0
# curr_lfsr = Acc

//curr_lfsr = (curr_lfsr<<1) | parity(curr_lfsr & tap_pattern)

set 0 1
add 1
set 1 0

// count++

set 0 5
add 1
set 5 0

// index++

xor 3 3
<-- add LOOP3
set 3 0
// num_instructions = LOOP3

xor 3 3
add 10
// Acc = 10

bne 1 3
# if Acc != reg[1] then PC-=reg[3]
# if (10 != count) then LOOP3

#!# LOOP3 END

set 3 7

xor 3 3
add 63
add 63
add 13
set 6 0
# store = 139
lsw 6 0
# load = lfsr_start_state
set 4 7

// curr_lfsr = lfsr_start_state

xor 3 3
set 1 0
set 2 0
add 63
add 1
set 5 0

// counter = 0
// i = 0
// index = 64

reg init:
0 64                # Acc
1 0                 # counter
2 0                 # i
3 tap_pattern       # tap_pattern
4 lfsr_start_state  # curr_lfsr
5 64                # index
6 139               # store
7 lfsr_start_state  # load

#!# LOOP4

lsw 5 0
# load = DM[index]

xor 7 4
# DM[index] ^ curr_lfsr

set 6 0
# store = DM[index] ^ curr_lfsr

lsw 0 2
# DM[i] = store

par 4 3

lsor 4 0

set 4 0

set 0 2
add 1
set 2 0

// i++

set 0 5
add 1
set 5 0

// index++

xor 3 3 
<-- add LOOP4
set 6 0 

xor 3 3
add 63
add 63
add 2

bne 5 6
// if 128 != index then LOOP4

#!# LOOP4 END

lsw 0 0
# ack
